datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int               @id @default(autoincrement())
  username  String            @unique
  password  String
  createdAt DateTime          @default(now())
  profile   Profile?
  chats     ChatParticipant[]
  messages  Message[]         @relation("MessageSender")
  Chat      Chat[]
}

model Profile {
  id       Int     @id @default(autoincrement())
  userId   Int     @unique
  avatar   String?
  fullName String?
  aboutMe  String?
  isOnline Boolean @default(false)
  user     User    @relation(fields: [userId], references: [id])
}

model Chat {
  id            Int               @id @default(autoincrement())
  type          ChatType
  name          String?
  createdAt     DateTime          @default(now())
  createdBy     Int
  createdByUser User              @relation(fields: [createdBy], references: [id])
  participants  ChatParticipant[]
  messages      Message[]
}

model ChatParticipant {
  id        Int      @id @default(autoincrement())
  chatId    Int
  userId    Int
  joinedAt  DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  isBlocked Boolean  @default(false)
}

model Message {
  id       Int      @id @default(autoincrement())
  chatId   Int
  senderId Int
  text     String
  sentAt   DateTime @default(now())
  isRead   Boolean  @default(false)
  isImage  Boolean?
  chat     Chat     @relation(fields: [chatId], references: [id])
  sender   User     @relation("MessageSender", fields: [senderId], references: [id])
}

enum ChatType {
  direct
  group
}
